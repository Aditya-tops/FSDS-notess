RUNNING NOTES: 13 - FEB - 2025
--------------------------------

1. PREVIOUS TOPIC			-	DATA VIZ PART 1
2. CURRENT TOPIC			-	DATA VIZ PART 2
3. UPCOMING TOPIC			-	NUMPY
						         

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------


DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. EDA PROJECT				-	Done

--------------------------------------------------

DATA VISUALIZATION
------------------

1. DATA VISUALIZATION PART 1		-	Done

2. DATA VISUALIZATION PART 2		-	Running topic

3. DATA VISUALIZATION FUNDAMENTALS	-	Assignment

--------------------------------------------------

NUMPY
-----

1. NUMPY INTRODUCTION			-	Running topic


--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

--------------------------------

2. DATA VISUALIZATION PART 2
----------------------------

Data Visualization Part 1

-> Writting a program
-> Running the program
-> Getting output as image format

----------------------------
1. Titanic Introduction


-> Titanic Ship
-> Relation between Titanic and Data Viz topic


-> Titanic dataset: public dataset

----------------------------

Creator of matplotli/seaborn
phone call each other

-> We created libraries
-> We need live and Big data
-> Once we get live and big data then we can apply Actual visualization

-> Google CEO	->	Can you give, your company data
		->	No

-> Amazon CEO	->	Can you give, your company data
			No!!!

-> real data	->	Situation
		->	Titanic situation


----------------------------

Datasets
	1. public	->	anyone can access
	2. private	->	No access for everyone

----------------------------

# Loading the titanic Dataset

import seaborn as sns

df = sns.load_dataset('titanic')

print(df)

----------------------------

# shape attribute

import seaborn as sns

df = sns.load_dataset('titanic')

print(df.shape)

----------------------------

# columns attribute

import seaborn as sns

df = sns.load_dataset('titanic')

print(df.columns)

----------------------------

from Charan GMS (privately):    5:57 PM
sir, without importing pandas how we are accssing pandas methods?

Excellent Question
------------------

-> Internally seaborn library was imported the pandas

----------------------------


String		->	No limit
		->	Daniel, Prasad, Rajesh

Category	->	Day names:
			Monday......Sunday	7


----------------------------

# info() method

import seaborn as sns

df = sns.load_dataset('titanic')

df.info()

----------------------------

# Applying unique() method

import seaborn as sns

df = sns.load_dataset('titanic')

result = df['sex'].unique()

print(result)

----------------------------

# Creating barplot by using seaborn library

import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')


df = sns.load_dataset('titanic')

sns.barplot(
	x = 'sex', 
	y = 'age', 
	data = df
)

plt.show()

----------------------------

# df['survived'].value_counts()

import seaborn as sns

df = sns.load_dataset('titanic')

print(df['survived'].value_counts())

----------------------------

# Finding missing values

import seaborn as sns

df = sns.load_dataset('titanic')

print(df.isna().sum())

----------------------------

# Finding missing values and sorting

import seaborn as sns

df = sns.load_dataset('titanic')

print(df.isna().sum().sort_values(ascending = False))

----------------------------

# df['survived'].value_counts()

import seaborn as sns

df = sns.load_dataset('titanic')

print(df['survived'].value_counts())

----------------------------

# count plot

import seaborn as sns
import matplotlib.pyplot as plt

df = sns.load_dataset('titanic')

sns.countplot(x = "survived", data = df)

plt.show()


----------------------------

Survived:	class

import seaborn as sns
import matplotlib.pyplot as plt


df = sns.load_dataset('titanic')

sns.barplot(
	x = 'class', 
	y = 'survived', 
	data = df
)

plt.show()

----------------------------

Survived:	class, gender


import seaborn as sns
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')

df = sns.load_dataset('titanic')

result = df.pivot_table(
	'survived', 
	index = 'sex', 
	columns = 'class'
)


print(result)

----------------------------

Survived:	class, gender, age

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

import warnings
warnings.filterwarnings('ignore')

df = sns.load_dataset('titanic')

diff_ages = pd.cut(df['age'], [0, 18, 80])

result = df.pivot_table(
	'survived', 
	['sex', diff_ages], 
	'class'
)

print(result)

----------------------------

-> We done today Session
-> We will connect again tomorrow
-> Daniel

---------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
