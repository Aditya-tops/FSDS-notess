RUNNING NOTES: 27 - FEB - 2025
--------------------------------

1. PREVIOUS TOPIC			-	MATHS
2. CURRENT TOPIC			-	FEATURE ENGG PART 1
3. UPCOMING TOPIC			-	FEATURE ENGG PART 2
									         

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------

DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. EDA PROJECT				-	Done

--------------------------------------------------

DATA VISUALIZATION
------------------

1. DATA VISUALIZATION PART 1		-	Done
2. DATA VISUALIZATION PART 2		-	Done
3. DATA VISUALIZATION FUNDAMENTALS	-	Done


4. DATA VISUALIZATION POWER BI		-	Upcoming topic	
		
--------------------------------------------------

NUMPY
-----

1. NUMPY INTRODUCTION			-	Done
2. NUMPY FUNDAMENTALS			-	Done
3. NUMPY ATTRIBUTES			-	Done
4. NUMPY METHODS			-	Done

--------------------------------------------------

MATHS						STATUS
-----						------

1. MATHS - PART - 1 - POPULATION, 	-	Done
	SAMPLE, TYPES OF VARIABLES


2. MATHS - PART - 2 - MODE, MEDIAN, 	-	Done
	MEAN, RANGE, 
	STANDARD DEVIATION, VARIANCE	


3. MATHS - PART - 3 - OUTLIERS		-	Done


4. MATHS - PART - 4 - THE FIVE NUMBERS	-	Done
	SUMMARY, BOX PLOT, OUTLIER


5. MATHS - PART - 5 - SYMMETRY AND 	-	Done
	SKEWNESS


6. MATHS - PART - 6 - EXPLANATORY AND 	-	Done
	RESPONSIVE VARIABLES


7. MATHS - PART - 7 - REGRESSION 	-	Done
	AND R SQUARED


8. MATHS - PART - 8 - RESIDUALS		-	Done


9. MATHS - PART - 9 - THE NORMAL 	-	Hold
	DISTRIBUTION AND 
	68-95-99.7 RULE

10. MATHS - PART - 10 - MATRIX		-	Done

--------------------------------------------------

FEATURE ENGINEERING
-------------------

1. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 1	-	Running topic

2. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 2	-	Upcoming topic


--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

--------------------------------

FEATURE ENGG PART 1
-------------------

Program			->	Python

Data Analysis		->	Pandas

Data Viz		->	matplotlib, seaborn

FE/ML			->	scikit-learn

-------------------

Initially		->	sklearn
later renamed		->	scikit-learn

we have installed	->	scikit-learn
but we need to import	->	sklearn


-------------------

# Creating feature from existing feature
# Converting from categorical data to numerical data

import pandas as pd
from sklearn.preprocessing import LabelEncoder

d = {
	"Company": ["Google", "Twitter", "Google", "LinkedIn"],
	"Role": ["Data Scientist", "Sales manager", "HR", "HR"]
}

df = pd.DataFrame(d)

label_encoder = LabelEncoder()

df["Company_n"] = label_encoder.fit_transform(df['Company'])

df["Role_n"] = label_encoder.fit_transform(df['Role'])

print(df)

-------------------

from Masud Siddiqi (privately):    5:51 PM
When we have thousands of categories, then how to convert that many categorical data to numerical data?

-> Good question
-> No doubt in that, we are doing the same
-> but, set of values

-------------------

>>> import sklearn.preprocessing as abc
>>> dir(abc)

output
------

[..... 'LabelEncoder', ....]

-------------------

10. MinMaxScaler
-----------------

Data:
	-> Scale in the data
	-> We can do by using MinMaxScaler


-----------------

IMP interview point :)
----------------------

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

d = {
	"x" : [10, 20, 30, 40, 50],
	"y" : [25, 50, 75, 100, 125]
}

df = pd.DataFrame(d)

print(df["x"])		#	Series
print()
print(df[["x"]])	#	Single column DataFrame

----------------------

ML flow
-------

Data
	DataFrame
			Feature Engg
					Array
						ML Alg


----------------------

-> In my free time, I used to read more and more technical books
-> Data Science

	1. Jason Brownlee	->	P.hd in ML
	2. Chrisalbon		->	P.hd in ML
					Flashcards


from Supriya Rao (privately):    6:13 PM
How about Alice Zheng & Amanda Casari for feat Engg sir 

Will share the feedback


----------------------

# MinMaxScaler Technique

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

d = {
	"x" : [10, 20, 30, 40, 50],
	"y" : [25, 50, 75, 100, 125]
}

df = pd.DataFrame(d)

print(df)

mm_scale = MinMaxScaler(feature_range = (0, 1))

df[["x", "y"]] = mm_scale.fit_transform(df[["x", "y"]])

print()
print(df)

----------------------

# Transforming the feature

import numpy as np

a = [[10, 20], [30, 40], [50, 60]]

f = np.array(a)

print(f+10)

----------------------

IMP interview question

# Handling outlier

import pandas as pd

houses = pd.DataFrame()

houses['Price'] = [534433, 392333, 293222, 4322032]
houses['rooms'] = [2, 3, 2, 116]
houses['Square_Feet'] = [1500, 2500, 1500, 48000]

con = houses['rooms'] < 5

print(houses[con])


----------------------

# Adding column to DataFrame

import pandas as pd
import numpy as np

houses = pd.DataFrame()

houses['Price'] = [534433, 392333, 293222, 4322032]
houses['rooms'] = [2, 3, 2, 116]
houses['Square_Feet'] = [1500, 2500, 1500, 48000]

houses["Outlier?"] = np.where(
	houses['rooms'] < 5, 
	"No", 
	"Yes"
)

print(houses)


----------------------

# Adding column to DataFrame

import pandas as pd
import numpy as np

houses = pd.DataFrame()

houses['Price'] = [534433, 392333, 293222, 4322032]
houses['rooms'] = [2, 3, 2, 116]
houses['Square_Feet'] = [1500, 2500, 1500, 48000]

houses["Outlier?"] = np.where(
	houses['rooms'] < 5, 
	0, 
	1
)

print(houses)

----------------------

Good question
-------------

1. Data
2. Load Data(df)
3. Recognize outlier(Apply formula)
	small outlier
	large outlier

4. Handle the outlier

----------------------

13. Impute Missing values

In pandas, topic: 12th

-> Handling missing values
	dropna()
	fillna()
	replace()

-> Let us learn in FE topic

----------------------

IMP interview question
----------------------

Order: Positional arg first and keyword args second otherwise we will get an Error, Below line error

# df = pd.DataFrame(columns = cols, students)

import numpy as np
import pandas as pd

students = [
	[85, 'M', 'verygood'],
	[95, 'F', 'excellent'],
	[60, None, 'good'],
	[np.NaN, 'M', 'average'],
	[70, 'M', 'good'],
	[np.NaN, None, 'verygood'],
	[60, 'F', 'verygood'],
	[98, 'M', 'excellent']
]

cols = ['marks', 'gender', 'result']

df = pd.DataFrame(columns = cols, students)

print(df)


Error

SyntaxError: positional argument follows keyword argument

----------------------

# Numerica column having missing values

import numpy as np
import pandas as pd

students = [
	[85, 'M', 'verygood'],
	[95, 'F', 'excellent'],
	[60, np.nan, 'good'],
	[np.NaN, 'M', 'average'],
	[70, 'M', 'good'],
	[np.NaN, np.nan, 'verygood'],
	[60, 'F', 'verygood'],
	[98, 'M', 'excellent']
]

cols = ['marks', 'gender', 'result']

df = pd.DataFrame(students, columns = cols)

print(df)

----------------------

-> We done today Session
-> Daniel from Naresh IT

--------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
