RUNNING NOTES: 11 - APRIL - 2025
--------------------------------

1. PREVIOUS TOPIC			-	ML: K NEAREST NEIGHBOR
2. CURRENT TOPIC			-	ML: XGBOOST ALG
3. UPCOMING TOPIC			-	ML: NAIVE BAYES ALG

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------

DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. EDA PROJECT				-	Done

--------------------------------------------------

DATA VISUALIZATION
------------------

1. DATA VISUALIZATION PART 1		-	Done
2. DATA VISUALIZATION PART 2		-	Done
3. DATA VISUALIZATION FUNDAMENTALS	-	Done

4. DATA VISUALIZATION POWER BI		-	Upcoming topic	
		
--------------------------------------------------

NUMPY
-----

1. NUMPY INTRODUCTION			-	Done
2. NUMPY FUNDAMENTALS			-	Done
3. NUMPY ATTRIBUTES			-	Done
4. NUMPY METHODS			-	Done

--------------------------------------------------

MATHS						STATUS
-----						------

1. MATHS - PART - 1 - POPULATION, 	-	Done
	SAMPLE, TYPES OF VARIABLES


2. MATHS - PART - 2 - MODE, MEDIAN, 	-	Done
	MEAN, RANGE, 
	STANDARD DEVIATION, VARIANCE	


3. MATHS - PART - 3 - OUTLIERS		-	Done


4. MATHS - PART - 4 - THE FIVE NUMBERS	-	Done
	SUMMARY, BOX PLOT, OUTLIER


5. MATHS - PART - 5 - SYMMETRY AND 	-	Done
	SKEWNESS


6. MATHS - PART - 6 - EXPLANATORY AND 	-	Done
	RESPONSIVE VARIABLES


7. MATHS - PART - 7 - REGRESSION 	-	Done
	AND R SQUARED


8. MATHS - PART - 8 - RESIDUALS		-	Done


9. MATHS - PART - 9 - THE NORMAL 	-	Hold
	DISTRIBUTION AND 
	68-95-99.7 RULE

10. MATHS - PART - 10 - MATRIX		-	Done

--------------------------------------------------

FEATURE ENGINEERING
-------------------

1. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 1	-	Done


2. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 2	-	Done

--------------------------------------------------

MACHINE LEARNING
----------------

1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	INTRODUCTION

2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TERMINOLOGY

3. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DATA AND ML ALGORITHMS

4. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LEARNING FUNCTION

5. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TYPES OF MODELS

6. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LIFE CYCLE

7. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TRAIN & TEST DATASETS


8. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	R VALUE


9. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION

9.1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

9.2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

10. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	MULTIPLE LINEAR REGRESSION


11. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	PICKLING AND UNPICKLING


12. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SAVE MODEL USING JOBLIB AND 
	PICKLING


13. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	POLYNOMIAL FEATURES

14. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DUMMY VARIABLE, ONEHOTENCODING


15. DATA SCIENCE - MACHINE LEARNING 	-	Done
	- R VALUE


16. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	COST FUNCTION


17. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	REGRESSION COST FUNCTION


18. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	LOGISTIC REGRESSION
	BINARY CLASSIFICATION

19. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LOGISTIC REGRESSION
	MULTI CLASS CLASSIFICATION


20. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DECISION TREE


21. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	RANDOM FOREST ALGORITHM



22. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	K-FOLD CROSS VALIDATION


23. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SVM

24. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	GRADIENT DESCENT ALGORITHM


25. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	UNDERFITTING & OVERFITTING


26. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	BIAS - VARIANCE TRADE OFF


27. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	K - MEANS CLUSTERING


28. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	HYPER PARAMETER TUNING 
	GRIDSEARCH CV


29. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	K NEAREST NEIGHBOR


30. DATA SCIENCE - MACHINE LEARNING 	- 	Running topic
	XGBOOST

31. DATA SCIENCE - MACHINE LEARNING 	- 	Upcoming topic
	NAIVE BAYES CLASSIFIER

--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

11. InvalidParameterError

------------------------------------

30. DATA SCIENCE - MACHINE LEARNING 
	XGBOOST

------------------------------------

Imp ponits!!!
-------------

	1. ML Flow
	2. ML Steps

------------------------------------

ML flow
-------

Data
	DataFrame
		Feature Engg
				Array
					Machine Learning Algorithm
					Cost function
					Gradient Descent Algorithm
						Increase accuracy
						Reduce Error
							Bias
							Variance


ML steps
--------

	1. Importing the libraries
	2. Loading the dataset
	3. Data preparation
	4. Splitting the dataset
	5. Model creation
	6. Model training
	7. Prediction

--------------------------------

*** install ***

	pip install xgboost

--------------------------------

Dataset
-------

	Name	Exp	Tech	Salary	
	------------------------------

	N1	E1	T1	S1
	N2	E2	T2	S2

--------------------------------

# Feature Selection

print("Topic: Feature Selection using XGBoost")
print()



print("Step 1: Importing the libraries")

from numpy import loadtxt
from matplotlib import pyplot
from xgboost import XGBClassifier




print("Step 2: Loading the dataset")

dataset = loadtxt(
    'pima-indians-diabetes.csv', 
    delimiter = ','
)





print("Step 3: Data preparation")

X = dataset[:, 0:8]
y = dataset[:, 8]





print("Step 4: Splitting the dataset: Opt")



print("Step 5: Model creation")

model = XGBClassifier()




print("Step 6: Model training")

model.fit(X, y)



print("Step Spl: Feature scores")

print()
print(model.feature_importances_)

--------------------------------

# Plotting the features scores with respective target 

print("Topic: Feature Selection using XGBoost")
print()



print("Step 1: Importing the libraries")

from numpy import loadtxt
from matplotlib import pyplot
from xgboost import XGBClassifier




print("Step 2: Loading the dataset")

dataset = loadtxt(
    'pima-indians-diabetes.csv', 
    delimiter = ','
)





print("Step 3: Data preparation")

X = dataset[:, 0:8]
y = dataset[:, 8]





print("Step 4: Splitting the dataset: Opt")



print("Step 5: Model creation")

model = XGBClassifier()




print("Step 6: Model training")

model.fit(X, y)



print("Step Spl: Feature scores")

r = range(len(model.feature_importances_))
f_imp = model.feature_importances_

pyplot.bar(r, f_imp)
pyplot.show()

--------------------------------

from Charan GMS (privately):    5:55 PM
sir, we have df.corr() for feature selection. then why again using xgboost for feature selection? 

Good point :)

manaully we need to call corr() method	->	Techn1
By using xgboost also we can get	->	Techn2

--------------------------------

30. DATA SCIENCE - MACHINE LEARNING - 
	NAIVE BAYES CLASSIFIER

--------------------------------

Naive Bayes

-> Algorithm
-> Supervised learning = features + target

--------------------------------

	f1		f2	f3		target

	Color		Taste	Shape		Apple

	red		sweet	round		apple


	prasad		naresh			daniel

	own brother	cousin			myself

--------------------------------

Patient:

-> Sufferring with major cough
-> Lungs effected
-> health condition also not good

Went to hospital
----------------

Doctor: 

-> ....
-> Habbits: of smoking		->	chain smoker
	       drinking		->	Daily: 3 glasses
	       ....
		reports		->	Cancer
		

--------------------------------

# Steps from 1 to 3

print("Topic: Naive Bayes Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd





print("Step 2: Loading the dataset")

df = pd.read_csv(
    'titanic.csv', 
    usecols = ['Pclass', 'Sex', 'Age', 'Fare', 'Survived']
)




print("Step 3: Data preparation")

inputs = df.drop('Survived', axis='columns')
target = df.Survived


dummies = pd.get_dummies(inputs.Sex, dtype = int)

inputs = pd.concat([inputs, dummies], axis = 'columns')

print()
print(inputs)

--------------------------------

# Feature Engg

print("Topic: Naive Bayes Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd





print("Step 2: Loading the dataset")

df = pd.read_csv(
    'titanic.csv', 
    usecols = ['Pclass', 'Sex', 'Age', 'Fare', 'Survived']
)




print("Step 3: Data preparation")

inputs = df.drop('Survived', axis='columns')
target = df.Survived


dummies = pd.get_dummies(inputs.Sex, dtype = int)

inputs = pd.concat([inputs, dummies], axis = 'columns')

inputs.drop(
    ['Sex', 'male'], 
    axis = 'columns', 
    inplace = True
)

print()
print(inputs)

--------------------------------

# Checking which columns having missing values

print("Topic: Naive Bayes Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd





print("Step 2: Loading the dataset")

df = pd.read_csv(
    'titanic.csv', 
    usecols = ['Pclass', 'Sex', 'Age', 'Fare', 'Survived']
)




print("Step 3: Data preparation")

inputs = df.drop('Survived', axis='columns')
target = df.Survived


dummies = pd.get_dummies(inputs.Sex, dtype = int)

inputs = pd.concat([inputs, dummies], axis = 'columns')

inputs.drop(
    ['Sex', 'male'], 
    axis = 'columns', 
    inplace = True
)

print()
print(inputs.columns[inputs.isna().any()].to_list())

--------------------------------

# Steps from 1 to 7

print("Topic: Naive Bayes Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split





print("Step 2: Loading the dataset")

df = pd.read_csv(
    'titanic.csv', 
    usecols = ['Pclass', 'Sex', 'Age', 'Fare', 'Survived']
)




print("Step 3: Data preparation")

inputs = df.drop('Survived', axis='columns')
target = df.Survived


dummies = pd.get_dummies(inputs.Sex, dtype = int)

inputs = pd.concat([inputs, dummies], axis = 'columns')

inputs.drop(
    ['Sex', 'male'], 
    axis = 'columns', 
    inplace = True
)


inputs.Age = inputs.Age.fillna(inputs.Age.mean())




print("Step 4: Splitting the dataset")

X_train, X_test, y_train, y_test = train_test_split(    inputs, 
    target, 
    test_size = 0.3
)






print("Step 5: Model creation")

model = GaussianNB()






print("Step 6: Model training")

model.fit(X_train, y_train)





print("Step 7: Prediction")

print()
print(X_test[0:5])
print()
print(model.predict(X_test[0:5]))

--------------------------------

# Applying K fold cross validation

print("Topic: Naive Bayes Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import cross_val_score





print("Step 2: Loading the dataset")

df = pd.read_csv(
    'titanic.csv', 
    usecols = ['Pclass', 'Sex', 'Age', 'Fare', 'Survived']
)




print("Step 3: Data preparation")

inputs = df.drop('Survived', axis='columns')
target = df.Survived


dummies = pd.get_dummies(inputs.Sex, dtype = int)

inputs = pd.concat([inputs, dummies], axis = 'columns')

inputs.drop(
    ['Sex', 'male'], 
    axis = 'columns', 
    inplace = True
)


inputs.Age = inputs.Age.fillna(inputs.Age.mean())

X = inputs
y = target




print("Step 4: Splitting the dataset: Opt")








print("Step 5: Model creation")

model = GaussianNB()




print()
print(cross_val_score(model,X, y, cv=5))

--------------------------------

-> We done today session
-> We will connect again on Monday
			  - Daniel

--------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
