RUNNING NOTES: 24 - MAR - 2025
--------------------------------

1. PREVIOUS TOPIC			-	ML: BINARY CLASSIFICATION
2. CURRENT TOPIC			-	ML: MULTI CLASS CLASSIFICATION
3. UPCOMING TOPIC			-	ML: NEW ALGORITHM
									         

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------

DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. EDA PROJECT				-	Done

--------------------------------------------------

DATA VISUALIZATION
------------------

1. DATA VISUALIZATION PART 1		-	Done
2. DATA VISUALIZATION PART 2		-	Done
3. DATA VISUALIZATION FUNDAMENTALS	-	Done

4. DATA VISUALIZATION POWER BI		-	Upcoming topic	
		
--------------------------------------------------

NUMPY
-----

1. NUMPY INTRODUCTION			-	Done
2. NUMPY FUNDAMENTALS			-	Done
3. NUMPY ATTRIBUTES			-	Done
4. NUMPY METHODS			-	Done

--------------------------------------------------

MATHS						STATUS
-----						------

1. MATHS - PART - 1 - POPULATION, 	-	Done
	SAMPLE, TYPES OF VARIABLES


2. MATHS - PART - 2 - MODE, MEDIAN, 	-	Done
	MEAN, RANGE, 
	STANDARD DEVIATION, VARIANCE	


3. MATHS - PART - 3 - OUTLIERS		-	Done


4. MATHS - PART - 4 - THE FIVE NUMBERS	-	Done
	SUMMARY, BOX PLOT, OUTLIER


5. MATHS - PART - 5 - SYMMETRY AND 	-	Done
	SKEWNESS


6. MATHS - PART - 6 - EXPLANATORY AND 	-	Done
	RESPONSIVE VARIABLES


7. MATHS - PART - 7 - REGRESSION 	-	Done
	AND R SQUARED


8. MATHS - PART - 8 - RESIDUALS		-	Done


9. MATHS - PART - 9 - THE NORMAL 	-	Hold
	DISTRIBUTION AND 
	68-95-99.7 RULE

10. MATHS - PART - 10 - MATRIX		-	Done

--------------------------------------------------

FEATURE ENGINEERING
-------------------

1. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 1	-	Done


2. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 2	-	Done

--------------------------------------------------

MACHINE LEARNING
----------------

1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	INTRODUCTION

2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TERMINOLOGY

3. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DATA AND ML ALGORITHMS

4. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LEARNING FUNCTION

5. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TYPES OF MODELS

6. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LIFE CYCLE

7. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TRAIN & TEST DATASETS


8. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	R VALUE


9. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION

9.1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

9.2. DATA SCIENCE - MACHINE LEARNING 	- 	Share
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

10. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	MULTIPLE LINEAR REGRESSION


12. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	PICKLING AND UNPICKLING


13. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SAVE MODEL USING JOBLIB AND 
	PICKLING


10. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	POLYNOMIAL FEATURES

11. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DUMMY VARIABLE, ONEHOTENCODING


12. DATA SCIENCE - MACHINE LEARNING 	-	Done
	- R VALUE


13. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	COST FUNCTION


14. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	REGRESSION COST FUNCTION


15. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	LOGISTIC REGRESSION
	BINARY CLASSIFICATION

16. DATA SCIENCE - MACHINE LEARNING 	- 	Running topic
	LOGISTIC REGRESSION
	MULTI CLASS CLASSIFICATION


--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

11. InvalidParameterError

------------------------------------

16. DATA SCIENCE - MACHINE LEARNING
	LOGISTIC REGRESSION
	MULTI CLASS CLASSIFICATION

------------------------------------

Two IMP things in ML

	1. ML Flow
	2. ML Steps

------------------------------------

ML flow
-------

Data
	DataFrame
		Feature Engg
				Array
					Machine Learning Algorithm
					Cost function
					Gradient Descent Algorithm
						Increase accuracy
						Reduce Error
							Bias
							Variance


ML steps
--------

	1. Importing the libraries
	2. Loading the dataset
	3. Data preparation
	4. Splitting the dataset
	5. Model creation
	6. Model training
	7. Prediction

--------------------------------

Good news :)


In my free time:	I like material preparation
			Review mode:

3 to 4 months:		Trending AI topics
			Sure: these topics include in resume

			1. Agentic AI
			2. AI Agents(5 parts, Part 1 is ready)
			3. RAG
			4. LLM

--------------------------------

Use case:
--------

Training 1	:	Cat/Dog

Shop		:	100 images

Training 2	:	

Father		->	Jeswanth
Son		->	Daniel(3 yrs of old)
Father concern	->	He wanted to train his son to recognize
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9
			numbers


20 shops	->	1797 images

continue....

train
test

--------------------------------

LogisticRegression model

Data	->	images data
	->	Gray scale images
	->	Blur images

Data	->	Model	->	learn from images(0....9)

training	Done

testing		why?	->	To check accuracy

--------------------------------

df.shape	->	attribute	lower case
df.columns	->	attribute	lower case

digits.DESCR	->	spl attribute	uppper case
			constant

--------------------------------

Steps 1 & 2

print("Topic: Logistic Regression: Multi class")
print()


print("Step 1: Importing the libraries")

from sklearn.datasets import load_digits




print("Step 2: Loading the dataset")

digits = load_digits()




print()
print(dir(digits))

--------------------------------

# Dataset description

print("Topic: Logistic Regression: Multi class")
print()


print("Step 1: Importing the libraries")

from sklearn.datasets import load_digits




print("Step 2: Loading the dataset")

digits = load_digits()




print()
print(digits.DESCR)

--------------------------------

# Dataset length

print("Topic: Logistic Regression: Multi class")
print()


print("Step 1: Importing the libraries")

from sklearn.datasets import load_digits




print("Step 2: Loading the dataset")

digits = load_digits()




print()
print(len(digits.data))

--------------------------------

dataset		->	Images
		->	1797

--------------------------------

Good question: 

Arey Daniel, you didnt given file path then how we got the Data?

Let me explain one small example :)

Ans: Its just simple like a function return group of values.
Same thing like this: load_digits is returning object, object having attribute so called as data.



def data():
    return list(range(1, 1000001))
    
d = data()

print(d)

--------------------------------

How many images		:	1797

Can I see one image	:	Yes we can
				Array
				Actual image

--------------------------------

# Getting first image

print("Topic: Logistic Regression: Multi class")
print()


print("Step 1: Importing the libraries")

from sklearn.datasets import load_digits




print("Step 2: Loading the dataset")

digits = load_digits()




print()
print(digits.data[0])

--------------------------------

# Getting second image

print("Topic: Logistic Regression: Multi class")
print()


print("Step 1: Importing the libraries")

from sklearn.datasets import load_digits




print("Step 2: Loading the dataset")

digits = load_digits()




print()
print(digits.data[1])

--------------------------------

data	==	images
array	==	images

--------------------------------

# Displaying array/pixels and image

from sklearn.datasets import load_digits
import matplotlib.pyplot as plt


digits = load_digits()

print(digits.images[0])
print()
plt.matshow(digits.images[0])
plt.gray()
plt.show()

--------------------------------

# Displaying array/pixels and image

from sklearn.datasets import load_digits
import matplotlib.pyplot as plt


digits = load_digits()

print(digits.images[1])
print()
plt.matshow(digits.images[1])
plt.gray()
plt.show()

--------------------------------

# IndexError

from sklearn.datasets import load_digits
import matplotlib.pyplot as plt


digits = load_digits()

print(digits.images[2000])
print()
plt.matshow(digits.images[2000])
plt.gray()
plt.show()

--------------------------------

-> We done today session
-> We will connect again tomorrow
-> Daniel :)

--------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
