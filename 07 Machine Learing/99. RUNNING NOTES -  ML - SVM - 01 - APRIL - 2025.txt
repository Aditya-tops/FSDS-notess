RUNNING NOTES: 01 - APRIL - 2025
--------------------------------

1. PREVIOUS TOPIC			-	ML: K-FOLD CROSS VALIDATION
2. CURRENT TOPIC			-	ML: SVM
3. UPCOMING TOPIC			-	ML: GRADIENT DESCENT ALGORITHM

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------

DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. EDA PROJECT				-	Done

--------------------------------------------------

DATA VISUALIZATION
------------------

1. DATA VISUALIZATION PART 1		-	Done
2. DATA VISUALIZATION PART 2		-	Done
3. DATA VISUALIZATION FUNDAMENTALS	-	Done

4. DATA VISUALIZATION POWER BI		-	Upcoming topic	
		
--------------------------------------------------

NUMPY
-----

1. NUMPY INTRODUCTION			-	Done
2. NUMPY FUNDAMENTALS			-	Done
3. NUMPY ATTRIBUTES			-	Done
4. NUMPY METHODS			-	Done

--------------------------------------------------

MATHS						STATUS
-----						------

1. MATHS - PART - 1 - POPULATION, 	-	Done
	SAMPLE, TYPES OF VARIABLES


2. MATHS - PART - 2 - MODE, MEDIAN, 	-	Done
	MEAN, RANGE, 
	STANDARD DEVIATION, VARIANCE	


3. MATHS - PART - 3 - OUTLIERS		-	Done


4. MATHS - PART - 4 - THE FIVE NUMBERS	-	Done
	SUMMARY, BOX PLOT, OUTLIER


5. MATHS - PART - 5 - SYMMETRY AND 	-	Done
	SKEWNESS


6. MATHS - PART - 6 - EXPLANATORY AND 	-	Done
	RESPONSIVE VARIABLES


7. MATHS - PART - 7 - REGRESSION 	-	Done
	AND R SQUARED


8. MATHS - PART - 8 - RESIDUALS		-	Done


9. MATHS - PART - 9 - THE NORMAL 	-	Hold
	DISTRIBUTION AND 
	68-95-99.7 RULE

10. MATHS - PART - 10 - MATRIX		-	Done

--------------------------------------------------

FEATURE ENGINEERING
-------------------

1. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 1	-	Done


2. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 2	-	Done

--------------------------------------------------

MACHINE LEARNING
----------------

1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	INTRODUCTION

2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TERMINOLOGY

3. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DATA AND ML ALGORITHMS

4. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LEARNING FUNCTION

5. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TYPES OF MODELS

6. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LIFE CYCLE

7. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TRAIN & TEST DATASETS


8. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	R VALUE


9. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION

9.1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

9.2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

10. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	MULTIPLE LINEAR REGRESSION


12. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	PICKLING AND UNPICKLING


13. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SAVE MODEL USING JOBLIB AND 
	PICKLING


10. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	POLYNOMIAL FEATURES

11. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DUMMY VARIABLE, ONEHOTENCODING


12. DATA SCIENCE - MACHINE LEARNING 	-	Done
	- R VALUE


13. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	COST FUNCTION


14. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	REGRESSION COST FUNCTION


15. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	LOGISTIC REGRESSION
	BINARY CLASSIFICATION

16. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LOGISTIC REGRESSION
	MULTI CLASS CLASSIFICATION


17. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DECISION TREE


18. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	RANDOM FOREST ALGORITHM



24. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	K-FOLD CROSS VALIDATION


25. DATA SCIENCE - MACHINE LEARNING 	- 	Running topic
	SVM

26. DATA SCIENCE - MACHINE LEARNING 	- 	Upcoming topic
	GRADIENT DESCENT ALGORITHM


--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

11. InvalidParameterError

------------------------------------

25. DATA SCIENCE - MACHINE LEARNING 	
	SVM

------------------------------------

Imp ponits!!!
-------------

	1. ML Flow
	2. ML Steps

------------------------------------

ML flow
-------

Data
	DataFrame
		Feature Engg
				Array
					Machine Learning Algorithm
					Cost function
					Gradient Descent Algorithm
						Increase accuracy
						Reduce Error
							Bias
							Variance


ML steps
--------

	1. Importing the libraries
	2. Loading the dataset
	3. Data preparation
	4. Splitting the dataset
	5. Model creation
	6. Model training
	7. Prediction

--------------------------------

SVM
---

-> Algorithm

-> SVM
	Classification:	SVC	Support Vector Classifieri
	Regression: SVR		Support Vector Regressor

--------------------------------

-> New algorithm applying on iris flowers dataset

public datasets
---------------

	1. kaggle
	2. https://archive.ics.uci.edu/



iris dataset
-------------

https://archive.ics.uci.edu/dataset/53/iris

--------------------------------

You guys are lag in practice :(

-> Requesting dont delay to do practice

--------------------------------

iris dataset
------------

-> Setosa - 0
-> Versicolor - 1
-> Virginica - 2


Features
--------
	1. sepal length
	2. sepal width
	3. petal length
	4. petal width


target names:
-------------
	1. Setosa 		mapping		0
	2. Versicolor		mapping		1
	3. Virginica		mapping 	2

--------------------------------

# String started with double quetes then we can use single quotes in between

a = "Hello 'Good' Evening"

print(a)

--------------------------------


# String started with single quotes then we can use double quotes in between

a = 'Hello "Good" Evening'

print(a)

--------------------------------

# If we started string with triple quotes then we can customise the string however we want

a = """Hello "good" evening, belong's"""

print(a)

--------------------------------

# Steps 1 and 2

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


print()
print(dir(iris))

--------------------------------

Best practice
-------------

	-> Uninstall all softwares
	-> Try to reinstall

--------------------------------

# Getting features names

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


print()
print(iris.feature_names)

--------------------------------

# Getting all target names

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


print()
print(iris.target_names)

--------------------------------

# Getting the data from iris object

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


print()
print(iris.data)

--------------------------------

# Checking dataset length

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


print()
print(len(iris.data))

--------------------------------

# Creating DataFrame

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


df = pd.DataFrame(
    iris.data, 
    columns = iris.feature_names
)

--------------------------------

# Creating DataFrame
# Adding target column

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


df = pd.DataFrame(
    iris.data, 
    columns = iris.feature_names
)

df['target'] = iris.target

print()
print(df.head())

--------------------------------

# Filtering target == 0

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


df = pd.DataFrame(
    iris.data, 
    columns = iris.feature_names
)

df['target'] = iris.target

print()
print(df[df.target == 0])

--------------------------------


# Filtering target == 1

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


df = pd.DataFrame(
    iris.data, 
    columns = iris.feature_names
)

df['target'] = iris.target

print()
print(df[df.target == 1])

--------------------------------


# Filtering target == 2

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


df = pd.DataFrame(
    iris.data, 
    columns = iris.feature_names
)

df['target'] = iris.target

print()
print(df[df.target == 2])

--------------------------------

# Loading the file

import pandas as pd

df = pd.read_csv("sales1.csv")

print(df.head())

--------------------------------

# Our own Function to load the data

import pandas as pd

def get_data(fn):
    d = pd.read_csv(fn)
    return d
    

f = "sales2.csv"

df = get_data(f)
print(df.head())  

--------------------------------

While working in project, please apply the below rules

-> Adding more features will be helpful to touch the code

	1. Modular approach
	2. Functional approach
	3. Object oriented approach


--------------------------------

from Iddipilli Karthik (privately):    6:45 PM
sir what if data has both regression and classification then how would we proceed further

Valid question :|

ecommerce domain:

Either Daniel will buy or not

		yes	or	no
		1	or	0

--------------------------------

# Plotting the Setosa and Versicolor features

print("Topic: SVM Algorithm")
print()




print("Step 1: Importing the libraries")

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris






print("Step 2: Loading the dataset")

iris = load_iris()


df = pd.DataFrame(
    iris.data, 
    columns = iris.feature_names
)





print("Step 3: Data preparation")

df['target'] = iris.target

df['flower_name'] = df.target.apply(lambda x: iris.target_names[x])

df0 = df[:50]
df1 = df[50:100]
df2 = df[100:]



print("Step Spl: Data viz")

plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')

plt.scatter(
    df0['sepal length (cm)'], 
    df0['sepal width (cm)'], 
    color = "green", 
    marker = '*'
)

plt.scatter(
    df1['sepal length (cm)'], 
    df1['sepal width (cm)'], 
    color = "blue", 
    marker = '.'
)


plt.show()


--------------------------------

-> I will continue Tomorrow
			- Daniel

--------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
