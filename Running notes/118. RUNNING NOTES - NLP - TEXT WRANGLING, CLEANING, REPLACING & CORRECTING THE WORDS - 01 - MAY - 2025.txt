RUNNING NOTES: 01 - MAY - 2025
--------------------------------

1. PREVIOUS TOPIC			-	DL: VISUALIZE ACC & LOSS
2. CURRENT TOPIC			-	NLP: TEXT WRANGLING AND CLEANING
3. UPCOMING TOPIC			-	NLP: REPLACING AND CORRECTING WORDS

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------

DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. EDA PROJECT				-	Done

--------------------------------------------------

DATA VISUALIZATION
------------------

1. DATA VISUALIZATION PART 1		-	Done
2. DATA VISUALIZATION PART 2		-	Done
3. DATA VISUALIZATION FUNDAMENTALS	-	Done

4. DATA VISUALIZATION POWER BI		-	Upcoming topic	
		
--------------------------------------------------

NUMPY
-----

1. NUMPY INTRODUCTION			-	Done
2. NUMPY FUNDAMENTALS			-	Done
3. NUMPY ATTRIBUTES			-	Done
4. NUMPY METHODS			-	Done

--------------------------------------------------

MATHS						STATUS
-----						------

1. MATHS - PART - 1 - POPULATION, 	-	Done
	SAMPLE, TYPES OF VARIABLES


2. MATHS - PART - 2 - MODE, MEDIAN, 	-	Done
	MEAN, RANGE, 
	STANDARD DEVIATION, VARIANCE	


3. MATHS - PART - 3 - OUTLIERS		-	Done


4. MATHS - PART - 4 - THE FIVE NUMBERS	-	Done
	SUMMARY, BOX PLOT, OUTLIER


5. MATHS - PART - 5 - SYMMETRY AND 	-	Done
	SKEWNESS


6. MATHS - PART - 6 - EXPLANATORY AND 	-	Done
	RESPONSIVE VARIABLES


7. MATHS - PART - 7 - REGRESSION 	-	Done
	AND R SQUARED


8. MATHS - PART - 8 - RESIDUALS		-	Done


9. MATHS - PART - 9 - THE NORMAL 	-	Hold
	DISTRIBUTION AND 
	68-95-99.7 RULE

10. MATHS - PART - 10 - MATRIX		-	Done

--------------------------------------------------

FEATURE ENGINEERING
-------------------

1. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 1	-	Done


2. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 2	-	Done

--------------------------------------------------

MACHINE LEARNING
----------------

1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	INTRODUCTION

2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TERMINOLOGY

3. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DATA AND ML ALGORITHMS

4. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LEARNING FUNCTION

5. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TYPES OF MODELS

6. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LIFE CYCLE

7. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TRAIN & TEST DATASETS


8. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	R VALUE


9. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION

9.1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

9.2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

10. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	MULTIPLE LINEAR REGRESSION


11. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	PICKLING AND UNPICKLING


12. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SAVE MODEL USING JOBLIB AND 
	PICKLING


13. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	POLYNOMIAL FEATURES

14. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DUMMY VARIABLE, ONEHOTENCODING


15. DATA SCIENCE - MACHINE LEARNING 	-	Done
	- R VALUE


16. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	COST FUNCTION


17. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	REGRESSION COST FUNCTION


18. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	LOGISTIC REGRESSION
	BINARY CLASSIFICATION

19. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LOGISTIC REGRESSION
	MULTI CLASS CLASSIFICATION


20. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DECISION TREE


21. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	RANDOM FOREST ALGORITHM



22. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	K-FOLD CROSS VALIDATION


23. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SVM

24. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	GRADIENT DESCENT ALGORITHM


25. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	UNDERFITTING & OVERFITTING


26. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	BIAS - VARIANCE TRADE OFF


27. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	K - MEANS CLUSTERING


28. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	HYPER PARAMETER TUNING 
	GRIDSEARCH CV


29. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	K NEAREST NEIGHBOR


30. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	XGBOOST

31. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	NAIVE BAYES CLASSIFIER


32. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	CONFUSION MATRIX


33. DATA SCIENCE - MACHINE LEARNING 	- 	Upcoming topic
	LASSO & RIDGE REGRESSION	

--------------------------------------------------

DEEP LEARNING
-------------

1. DEEP LEARNING - INTRODUCTION		-	Done
2. DEEP LEARNING - LIBRARIES		-	Done

3. DEEP LEARNING - IMPORTANT 		-	Done
	TERMINOLOGY

4. DEEP LEARNING - MULTILAYER 		-	Done
	PERCEPTRONS

5. DEEP LEARNING - MULTILAYER 		-	Done
	PERCEPTRONS EXAMPLE	

6. DEEP LEARNING - EVALUATE MODEL 	-	Done
	PERFORMANCE	

7. DEEP LEARNING - EVALUATE MODEL 	-	Done
	SAVE MODEL

-  DATA SCIENCE - ENV - PYCHARM		-	Done


8. DEEP LEARNING - BEST MODEL CHECK 	-	Done
	POINT

9. DEEP LEARNING - VISUALIZE MODEL 	-	Done
	ACCURACY & SCORE


--------------------------------------------------

NATURAL LANGUAGE PROCESSING(NLP)
---------------------------

1. NLP - INTRODUCTION			-	Done

2. NLP - TEXT WRANGLING AND CLEANING	-	Running topic

3. NLP - REPLACING AND CORRECTING WORDS	-	Upcoming topic


--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

11. InvalidParameterError

------------------------------------

2. NLP - TEXT WRANGLING AND CLEANING

----------------------------------------

Text Analytics
---------------

	1. Load the text data
	2. Tokenization
		word
		sentense
	3. Clean the text
		Filter alphabets
		Filter numbers
		Filter special symbols

	4. Stemming
	5. Lematization
	6. Stop word removal

----------------------------------------

6. Stop word removal
--------------------

original1 = "Horse is running fast"
original2 = "i am boy"


	nlp == Remove the stop words

	is	->	Stop word
	i	->	Stop word
	am	->	Stop word


output1 = "Horse running fast"
output2 = "boy"

--------------------

One IMP example
---------------

a = [10, 20, 30]
b = [10, 20, 30, 40, 50, 60]


Common numbers	:	op1	[10, 20, 30]
Not common	:	op2	[40, 50, 60]

--------------------

# Common values

a = [10, 20, 30]
b = [10, 20, 30, 40, 50, 60]

op1 = [
	value
	for value in b
	if value in a
]

print(op1)

--------------------

# not common

a = [10, 20, 30]
b = [10, 20, 30, 40, 50, 60]

op2 = [
	value
	for value in b
	if value not in a
]

print(op2)

--------------------
Focus on below example

stop_words = ["i", "am", "is", "that", "so", "a"]

s = "i am a boy"

words = ["i", "am", "a", "boy"]

--------------------

stopwords = ["i", "am", "is", "that", "so", "a"]
words = ["i", "am", "a", "boy"]

result = [
	word
	for word in words
	if word not in stopwords
]

print(result)

--------------------

# Getting all stop words

import nltk
from nltk.corpus import stopwords

print(stopwords.words('english'))

--------------------

from Supriya Rao (privately):    6:00 PM
but whats the purpose of eliminating these pronouns sir? 

Valid point

	horse is running fast

	For grammer its imp
	for understanding the meaning: is word not imp

--------------------

from Repani Nagendranadh (privately):    6:02 PM
sir how it can understand human names 

There is topic: NER(Named Entity Recognization)

--------------------

# Finding number of languages: NLP supports

from nltk.corpus import stopwords

langs = stopwords.fileids()

print(len(langs))

--------------------

# Removing stop words from main string

import nltk
from nltk.corpus import stopwords

s_words = stopwords.words('english')

line = "today climate is too hot"

words = line.split()

result = [
	word
	for word in words
	if word not in s_words
]

print(line)
print()
print(result)

----------------------------------------

# Filtering stop words from main string

import nltk
from nltk.corpus import stopwords

s_words = stopwords.words('english')

line = "this is daniel used to teach python"

words = line.split()

result = [
	word
	for word in words
	if word not in s_words
]

print(line)
print()
print(result)

----------------------------------------

# Filtering unuseful words

import nltk
from nltk.corpus import stopwords

s_words = stopwords.words('english')

line = "once upon a time there was a king having seven sons they went forest they bought seven fishes"

words = line.split()

result = [
	word
	for word in words
	if word not in s_words
]

print(line)
print()
print(result)

----------------------------------------

3. NLP - REPLACING AND CORRECTING WORDS
----------------------------------------

# Removing numbers from text data

import re

log = "first credit card: 1234, second credit card number: 2345, third credit card number: 3456"

result = re.sub(r'\d+', '', log)

print(log)
print()
print(result)

----------------------------------------

# Remove special symbols

import re

text = "!@#!@#Hello#$%#$% Good$%$% Morning@!#@"
res = re.sub(r'[^\w\s]', '', text)

print(text)
print()
print(res)

----------------------------------------

# Split and join

data = "this is daniel working as Data Scientist"

result1 = data.split()
result2 = ":".join(result1)

print(result1)
print()
print(result2)

----------------------------------------

# Mandatory to run below examples

import nltk

nltk.download('averaged_perceptron_tagger')
nltk.download('averaged_perceptron_tagger_eng')


----------------------------------------

# Apply POS on text data

import nltk
from textblob import TextBlob
nltk.download('averaged_perceptron_tagger')
nltk.download('averaged_perceptron_tagger_eng')

text = "Daniel is singing and Kusuma is running"

result = TextBlob(text)

print(text)
print()
print(result.tags)


----------------------------------------

# Filter person names

from textblob import TextBlob

text = "Daniel is singing and Kusuma is running"

output = TextBlob(text)

for t in output.tags:
	if t[1] == "NNP":
		print(t[0])


----------------------------------------

# Filter all verbs from main string

from textblob import TextBlob

text = "Daniel is singing and Kusuma is running baby is crying."

output = TextBlob(text)

result = [
	t[0]
	for t in output.tags
	if t[1] == "VBG"
]

print(text)
print()
print(result)


----------------------------------------

Collocations:
	1. Bigrams
	2. Trigrams

----------------------------------------

# Bigrams

import nltk

text = "This is Daniel and my age is 34"

words = nltk.word_tokenize(text)
output = list(nltk.bigrams(words))

print(text)
print()
print(output)

----------------------------------------

# Trigrams

import nltk

text = "This is Daniel and my age is 34"

words = nltk.word_tokenize(text)
output = list(nltk.trigrams(words))

print(text)
print()
print(output)

----------------------------------------

-> We done today session
		 - Daniel

----------------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
