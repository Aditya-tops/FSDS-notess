RUNNING NOTES: 07 - FEB - 2025
--------------------------------

1. PREVIOUS TOPIC			-	EDA PROJECT PART 2
2. CURRENT TOPIC			-	EDA PROJECT PART 3
3. UPCOMING TOPIC			-	EDA PROJECT PART 4
						         

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------


DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. PROJECT PART 1			-	Done
2. PROJECT PART 2			-	Done
3. PROJECT PART 3			-	Running topic


--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

--------------------------------

3. PROJECT PART 3
-----------------

# Continue from Part 2 discussion


0
1
2
3
5
6

reset_index()	method

--------------------------------

# Accessing invoice_date column

Method - 1 to access column

df_new['invoice_date']


--------------------------------

Accessing year value from invoice_date

df_new['invoice_date'].dt.year


--------------------------------

Accessing month value from invoice_date

df_new['invoice_date'].dt.month

--------------------------------

input

-> 2010-12-01 08:26:00

output

	year	2010 * 100	-	201000
	month	12		-	    12

	Summation			201012


	result	201012	?

--------------------------------

# adding  year_month column to DataFrame

c1 = 'year_month'
v1 = df_new['invoice_date'].map(lambda col: 100*(col.year) + col.month)
df_new.insert(loc = 2, column = c1, value = v1)

--------------------------------

# Adding month column to the exisint DataFrame

c2 = 'month'
v2 = df_new.invoice_date.dt.month

df_new.insert(loc = 3, column = c2, value = v2)

df_new.head()

--------------------------------

# We can get day of the week

df_new.invoice_date.dt.dayofweek

--------------------------------

# Regarding: day of the week

In pandas, the day formate starts from 0 to 6
Monday = 0 Tuesday = 1 .... Sunday = 6

Apply +1 to make Monday = 1.....until Sunday = 7



c3 = 'day'

v3 = (df_new.invoice_date.dt.dayofweek)+1

df_new.insert(loc = 4, column = c3, value = v3)

df_new.head()

--------------------------------

Adding hour column to existing DataFrame

Follow the template to understand :)

--------------------------------

# Applying groupby based on country and cust id columns

df_new.groupby(by = ['cust_id','country'])['invoice_num'].count()

--------------------------------

Data Visaulization libraries


Program		->	Installed python

Data Analysis	->	pandas

Data Viz	->	matplotlib, seaborn
		->	(Upcoming topics)

Kind note	->	No need to check code
			please Check images(data viz)

		->	pip install matplotlib
			pip install seaborn


--------------------------------

I would like to work with

pandas
	1. notepad + cmd	->	pip install pandas

	2. jupyter		->	its works well
				->	!pip install pandas


--------------------------------

# Top 10 customers from the Data

orders.sort_values(by = 'invoice_num', ascending = False).head(10)

--------------------------------

Top 5 customers who spent more money

money_spent.sort_values(by='amount_spent', ascending = False).head()

--------------------------------

# Who order more items	->	Daniel
# Who spent more money	->	Kusuma


Daniel

	10 items	->	1000

Kusuma
	1		->	70000

--------------------------------

We done today Session

- Daniel

---------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
