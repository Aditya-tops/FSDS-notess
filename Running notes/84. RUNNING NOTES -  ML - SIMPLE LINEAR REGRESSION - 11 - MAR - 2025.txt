RUNNING NOTES: 11 - MAR - 2025
--------------------------------

1. PREVIOUS TOPIC			-	TRAIN TEST SPLIT
2. CURRENT TOPIC			-	ML: SIMPLE LINEAR REGRESSION
3. UPCOMING TOPIC			-	ML: MULTIPLE LINEAR REGRESSION
									         

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------

DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. EDA PROJECT				-	Done

--------------------------------------------------

DATA VISUALIZATION
------------------

1. DATA VISUALIZATION PART 1		-	Done
2. DATA VISUALIZATION PART 2		-	Done
3. DATA VISUALIZATION FUNDAMENTALS	-	Done

4. DATA VISUALIZATION POWER BI		-	Upcoming topic	
		
--------------------------------------------------

NUMPY
-----

1. NUMPY INTRODUCTION			-	Done
2. NUMPY FUNDAMENTALS			-	Done
3. NUMPY ATTRIBUTES			-	Done
4. NUMPY METHODS			-	Done

--------------------------------------------------

MATHS						STATUS
-----						------

1. MATHS - PART - 1 - POPULATION, 	-	Done
	SAMPLE, TYPES OF VARIABLES


2. MATHS - PART - 2 - MODE, MEDIAN, 	-	Done
	MEAN, RANGE, 
	STANDARD DEVIATION, VARIANCE	


3. MATHS - PART - 3 - OUTLIERS		-	Done


4. MATHS - PART - 4 - THE FIVE NUMBERS	-	Done
	SUMMARY, BOX PLOT, OUTLIER


5. MATHS - PART - 5 - SYMMETRY AND 	-	Done
	SKEWNESS


6. MATHS - PART - 6 - EXPLANATORY AND 	-	Done
	RESPONSIVE VARIABLES


7. MATHS - PART - 7 - REGRESSION 	-	Done
	AND R SQUARED


8. MATHS - PART - 8 - RESIDUALS		-	Done


9. MATHS - PART - 9 - THE NORMAL 	-	Hold
	DISTRIBUTION AND 
	68-95-99.7 RULE

10. MATHS - PART - 10 - MATRIX		-	Done

--------------------------------------------------

FEATURE ENGINEERING
-------------------

1. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 1	-	Done


2. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 2	-	Done

--------------------------------------------------

MACHINE LEARNING
----------------

1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	INTRODUCTION

2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TERMINOLOGY

3. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DATA AND ML ALGORITHMS

4. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LEARNING FUNCTION

5. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TYPES OF MODELS

6. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LIFE CYCLE

7. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TRAIN & TEST DATASETS

8. DATA SCIENCE - MACHINE LEARNING 	- 	Upcoming topic	
	R VALUE

9. DATA SCIENCE - MACHINE LEARNING 	- 	Running topic	
	SIMPLE LINEAR REGRESSION




--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

11. InvalidParameterError

--------------------------------

9. DATA SCIENCE - MACHINE LEARNING 	
	SIMPLE LINEAR REGRESSION

--------------------------------

ML flow
-------

Data
	DataFrame
		Feature Engg
				Array
					Machine Learning Algorithm
					Cost/Error function
					Gradient Descent Algorithm
						Increase accuracy
						Reduce Error


ML steps
--------

	1. Importing the libraries
	2. Loading the dataset
	3. Data preparation
	4. Splitting the dataset
	5. Model creation
	6. Model training
	7. Prediction

--------------------------------

1. Python		->	Write a program(logic)
			->	Using: flow control, functions etc

2. Pandas		->	Data Analysis
			->	Using: Series, DataFrame

3. ML			->	Prediction
			->	Using: Algorithms
			->	There is process to do Prediction


--------------------------------

Linear Regression
-----------------

	1. Simple Linear Regression

		One input 	and 	One output
		ont feature 	and 	one target
		one X		and 	one y
	
	2. Multiple Linear Regression
		2/3 inputs	and	one output
		2/3 features	and	one output
		X1, X2, X3	and	one y


--------------------------------

1. Simple Linear Regression

	Area		Price
	---------------------
	X1		y1
	X2		y2
	X3		y3

ML
	X10		y10(ml prediction)

--------------------------------

Notepad++
---------

-> Text editor
-> By using this we can write a programs
-> Download and install


--------------------------------

3. Data preparation:

-> Prepare input(X) and output(y)
-> X and y should be in array formate ONLY
-> X should be column format
-> y should be in row format

--------------------------------

# Steps from 1 to 3

print("Topic: Simple Linear Regression")
print()



print("Step 1: Importing the libraries")

import pandas as pd






print("Step 2: Loading the dataset")

df = pd.read_csv("homeprices.csv")




print("Step 3: Data preparation: X, y")

new_df = df.drop("price", axis = "columns")

X = new_df.values
y = df["price"].values

print()
print(df)
print()
print(X)
print()
print(y)

--------------------------------

IMP points
----------

	1. Importing the class
	2. Creating an object to a class
	3. Calling a method


--------------------------------

# 6. Model training

-> Just we need to call a method by using model object

mondel.fit(Input, Output)

model.fit(X, y)

		C
		o
		l
model.fit(	u	,	Row	)
		m



--------------------------------

# Steps from 1 to 6

print("Topic: Simple Linear Regression")
print()



print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.linear_model import LinearRegression






print("Step 2: Loading the dataset")

df = pd.read_csv("homeprices.csv")





print("Step 3: Data preparation: X, y")

new_df = df.drop("price", axis = "columns")

X = new_df.values
y = df["price"].values






print("Step 4: Splitting the dataset: Optional")

print("Step 5: Model creation")

model = LinearRegression()



print("Step 6: Model training")

model.fit(X, y)

--------------------------------

# 7. Prediction

My Bro:	Prasad
	------

	area	price
	--------------
	2600	550000
	3000	565000
	3200	610000
	3600	680000
	4000	725000

Office room: List of above houses

Customers: 

P1	3200	610000
P2	4000	725000
P3	3400	?????

--------------------------------

-> Prasad dont know the answer:
   Estimation

	area	price
	--------------
	2600	550000
	3000	565000
	3200	610000
				   642294
	3400	?	610000		?	680000

	3600	680000
	4000	725000

	5000	Shaky moment bcoz they dont have the data

Simple
	model.predict([[5000]])	=>	859554

--------------------------------

# Steps from 1 to 7

print("Topic: Simple Linear Regression")
print()



print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.linear_model import LinearRegression






print("Step 2: Loading the dataset")

df = pd.read_csv("homeprices.csv")





print("Step 3: Data preparation: X, y")

new_df = df.drop("price", axis = "columns")

X = new_df.values
y = df["price"].values






print("Step 4: Splitting the dataset: Optional")

print("Step 5: Model creation")

model = LinearRegression()



print("Step 6: Model training")

model.fit(X, y)




print("Step 7: Prediction")

print()

print(model.predict([[3400]]))

--------------------------------

IMP points
-----------

-> To train the model we need to call fit() method
-> To do the prediction we need to call predict() method

--------------------------------

IMP point
---------

		Actual value
		Orinal value	Prediction	Error
	Area	Price
	-------------		----------
	2600	550000		550000
	3000	565000
	3200	610000
	3600	680000
	4000	725000

ml	2600			533664		17K



Error: Upcoming topic

--------------------------------

IMP point
---------

1. Once model is trained then by using model we can get
	1. coefitient
	2. intercept

2. Inside model, there are Two special attributes
	1. model.coef_
	2. model.intercept_


--------------------------------

coef_		=>	[135.78767123]

--------------------------------

# Getting the coefitient value

print("Topic: Simple Linear Regression")
print()



print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.linear_model import LinearRegression






print("Step 2: Loading the dataset")

df = pd.read_csv("homeprices.csv")





print("Step 3: Data preparation: X, y")

new_df = df.drop("price", axis = "columns")

X = new_df.values
y = df["price"].values






print("Step 4: Splitting the dataset: Optional")

print("Step 5: Model creation")

model = LinearRegression()



print("Step 6: Model training")

model.fit(X, y)




print("Step Spl: Get coefitient")

print()
print(model.coef_)

--------------------------------

model.intercept_ 	=	180616.43835616432

--------------------------------

# Getting the intercept value

print("Topic: Simple Linear Regression")
print()



print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.linear_model import LinearRegression






print("Step 2: Loading the dataset")

df = pd.read_csv("homeprices.csv")





print("Step 3: Data preparation: X, y")

new_df = df.drop("price", axis = "columns")

X = new_df.values
y = df["price"].values






print("Step 4: Splitting the dataset: Optional")

print("Step 5: Model creation")

model = LinearRegression()



print("Step 6: Model training")

model.fit(X, y)




print("Step Spl: Get intercept")

print()
print(model.intercept_)

--------------------------------

What is the use of coe and intercept?

-> Machine learning algorithm using these values to do the prediction in backend

--------------------------------

Formula
-------
	Price = coe * area + intercept

	Price_3400 = 135.78767123 * 3400 + 180616.43835616432

--------------------------------

# Calling predict Method
# Using manual calculations too

print("Topic: Simple Linear Regression")
print()



print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.linear_model import LinearRegression






print("Step 2: Loading the dataset")

df = pd.read_csv("homeprices.csv")





print("Step 3: Data preparation: X, y")

new_df = df.drop("price", axis = "columns")

X = new_df.values
y = df["price"].values






print("Step 4: Splitting the dataset: Optional")

print("Step 5: Model creation")

model = LinearRegression()



print("Step 6: Model training")

model.fit(X, y)




print("Step 7: Prediction")

print()
print(model.predict([[3400]]))
print()

price_3400 = 135.78767123 * 3400 + 180616.43835616432

print(price_3400)

--------------------------------

Example: Steps from 1 to 7 

-> This example you have to practice min 5 times

--------------------------------

12. Best fitted line

-> Continue...

-> Daniel :)

--------------------------------

Coming Saturday:

No exam:	

Pandas:		dataset1, dataset2

use dataset1	implement examples

takes sales5.csv	implement all groupby scenarios



--------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
