RUNNING NOTES: 17 - MAR - 2025
--------------------------------

1. PREVIOUS TOPIC			-	ML: SAVE THE MODEL
2. CURRENT TOPIC			-	ML: POLYNOMIAL FEATURE
3. UPCOMING TOPIC			-	ML: ONEHOTENCODING + ML
									         

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------

DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. EDA PROJECT				-	Done

--------------------------------------------------

DATA VISUALIZATION
------------------

1. DATA VISUALIZATION PART 1		-	Done
2. DATA VISUALIZATION PART 2		-	Done
3. DATA VISUALIZATION FUNDAMENTALS	-	Done

4. DATA VISUALIZATION POWER BI		-	Upcoming topic	
		
--------------------------------------------------

NUMPY
-----

1. NUMPY INTRODUCTION			-	Done
2. NUMPY FUNDAMENTALS			-	Done
3. NUMPY ATTRIBUTES			-	Done
4. NUMPY METHODS			-	Done

--------------------------------------------------

MATHS						STATUS
-----						------

1. MATHS - PART - 1 - POPULATION, 	-	Done
	SAMPLE, TYPES OF VARIABLES


2. MATHS - PART - 2 - MODE, MEDIAN, 	-	Done
	MEAN, RANGE, 
	STANDARD DEVIATION, VARIANCE	


3. MATHS - PART - 3 - OUTLIERS		-	Done


4. MATHS - PART - 4 - THE FIVE NUMBERS	-	Done
	SUMMARY, BOX PLOT, OUTLIER


5. MATHS - PART - 5 - SYMMETRY AND 	-	Done
	SKEWNESS


6. MATHS - PART - 6 - EXPLANATORY AND 	-	Done
	RESPONSIVE VARIABLES


7. MATHS - PART - 7 - REGRESSION 	-	Done
	AND R SQUARED


8. MATHS - PART - 8 - RESIDUALS		-	Done


9. MATHS - PART - 9 - THE NORMAL 	-	Hold
	DISTRIBUTION AND 
	68-95-99.7 RULE

10. MATHS - PART - 10 - MATRIX		-	Done

--------------------------------------------------

FEATURE ENGINEERING
-------------------

1. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 1	-	Done


2. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 2	-	Done

--------------------------------------------------

MACHINE LEARNING
----------------

1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	INTRODUCTION

2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TERMINOLOGY

3. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DATA AND ML ALGORITHMS

4. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LEARNING FUNCTION

5. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TYPES OF MODELS

6. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LIFE CYCLE

7. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TRAIN & TEST DATASETS


8. DATA SCIENCE - MACHINE LEARNING 	- 	Upcoming topic	
	R VALUE


9. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION

9.1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

9.2. DATA SCIENCE - MACHINE LEARNING 	- 	Share
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

10. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	MULTIPLE LINEAR REGRESSION


12. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	PICKLING AND UNPICKLING


13. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SAVE MODEL USING JOBLIB AND 
	PICKLING


10. DATA SCIENCE - MACHINE LEARNING 	- 	Running topic
	POLYNOMIAL FEATURES


--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

11. InvalidParameterError

--------------------------------

10. DATA SCIENCE - MACHINE LEARNING
	POLYNOMIAL FEATURES

--------------------------------

ML flow
-------

Data
	DataFrame
		Feature Engg
				Array
					Machine Learning Algorithm
					Cost function
					Gradient Descent Algorithm
						Increase accuracy
						Reduce Error
							Bias
							Variance


ML steps
--------

	1. Importing the libraries
	2. Loading the dataset
	3. Data preparation
	4. Splitting the dataset
	5. Model creation
	6. Model training
	7. Prediction

--------------------------------

Data
----
	1. Linear
	2. Non-linear

--------------------------------

Linear
------

-> We have Two columns: Area, Rice packs
-> Find the relationship(By using data visualization, corr/r)
-> If we plot the data, then we will get a graph like a line
-> It is called as linear

-> If data having linear nature then apply LINEAR REGRESSION

--------------------------------

None Linear
------------

-> We have two columns: X, y
-> Find the relationship(By using Data Viz, corr/r)
-> If we plot the data, then we will graph like CURVE shape
-> It is called as non linear

-> If the data having non linear nature,
	1. DONT APPLY LINEAR REGRESSION
	2. We need to apply Polynomial Regression

--------------------------------

Polynial Feature
----------------

Poly means many

-> One form in many ways

-> Power
	Cook the rice
	fan
	lights

--------------------------------

Linear Regression formula
-------------------------

y = m1x1 + m2x2 + m3x3 + e

Polynomial Regression formual
-----------------------------

Here we will get exponential value for feature

-----------------------------

Polynomial feature

Existing feature

	column1		
	1
	2	
	3	
	4

-----------------------------

New features
------------

	column1		column2		column3
	1		1		1
	2		1		4
	3		1		9
	4		1		16


-----------------------------

# Single feature, degree = 1

from numpy import asarray
from sklearn.preprocessing import PolynomialFeatures

a = [[2], [3], [4]]

data1 = asarray(a)

obj = PolynomialFeatures(degree = 1)

data2 = obj.fit_transform(data1)

print(data1)
print()
print(data2)

-----------------------------

# Single feature, degree = 2

from numpy import asarray
from sklearn.preprocessing import PolynomialFeatures

a = [[2], [3], [4]]

data1 = asarray(a)

obj = PolynomialFeatures(degree = 2)

data2 = obj.fit_transform(data1)

print(data1)
print()
print(data2)

--------------------------------

# Single feature, degree = 3

from numpy import asarray
from sklearn.preprocessing import PolynomialFeatures

a = [[2], [3], [4]]

data1 = asarray(a)

obj = PolynomialFeatures(degree = 3)

data2 = obj.fit_transform(data1)

print(data1)
print()
print(data2)

--------------------------------

# Two columns, degree = 1

from numpy import asarray
from sklearn.preprocessing import PolynomialFeatures

a = [[2, 3], [4, 5], [6, 7]]
data1 = asarray(a)

obj = PolynomialFeatures(degree = 1)
data2 = obj.fit_transform(data1)

print(data1)
print()
print(data2)

--------------------------------

# Two features, degree = 2

from numpy import asarray
from sklearn.preprocessing import PolynomialFeatures

a = [[2, 3], [4, 5], [6, 7]]
data1 = asarray(a)

obj = PolynomialFeatures(degree = 2)
data2 = obj.fit_transform(data1)

print(data1)
print()
print(data2)

--------------------------------

# Two feature, degree = 3

from numpy import asarray
from sklearn.preprocessing import PolynomialFeatures

a = [[2, 3], [4, 5], [6, 7]]
data1 = asarray(a)

obj = PolynomialFeatures(degree = 3)
data2 = obj.fit_transform(data1)

print(data1)
print()
print(data2)

--------------------------------

Data: We feel like, we can apply linear regression

Level	Salary
1	45000
2	50000
3	60000
4	80000
5	110000
6	150000
7	200000
8	300000
9	500000
10	1000000


--------------------------------

Simple Linear Regression

input and output	->	Array

input			->	column	-> single col df.values
output			->	row	-> series.values


--------------------------------

# Steps from 1 to 3

print("Polynomial Regression")
print()


print("Step 1: Importing the libraries")

import pandas as pd



print("Step 2: Loading the dataset")

df = pd.read_csv("poly_dataset.csv")





print("Step 3: Data preparation")

X = df.iloc[:, 1:2].values
y = df.iloc[:, 2].values

print()
print(X)
print()
print(y)

--------------------------------

If X is increasing then y is increasing: linear regression

If X is increasing then y cannot increas like proposional

Linear Regression
	
	Area	Rice packs
	1	10
	2	20
	3	30
	4	40

Non linear
----------

	Dose	Fever level
	1	25%
	2	50%		invalid
	3	75%		invalid

--------------------------------

# Plotting the data

print("Polynomial Regression")
print()


print("Step 1: Importing the libraries")

import pandas as pd
import matplotlib.pyplot as plt



print("Step 2: Loading the dataset")

df = pd.read_csv("poly_dataset.csv")





print("Step 3: Data preparation")

X = df.iloc[:, 1:2].values
y = df.iloc[:, 2].values



print("Step Spl: Data Viz")

plt.scatter(X, y, color = "blue")

plt.title("Data scattered")
plt.xlabel("Position Levels")
plt.ylabel("Salary")

plt.show()

--------------------------------

Non linear data		->	Lets apply LinearRegression
			->	Wrong prediction
			->	Let us verify

			->	Solution: Apply Polynomial regress


--------------------------------

Data: 
	-> non linear, applied LinearRegression
	-> Prediction:
	-> model.predict([[6.5]])

	

Level	Salary
1	45000
2	50000
3	60000
4	80000
5	110000
6	150000

6.5		150000	?	200000

			3,30,378
			Sorry, this is wrong prediction	
			done by LinearRegression


7	200000
8	300000
9	500000
10	1000000


--------------------------------

# Steps from 1 to 7: LinearRegression

print("Polynomial Regression")
print()


print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.linear_model import LinearRegression




print("Step 2: Loading the dataset")

df = pd.read_csv("poly_dataset.csv")





print("Step 3: Data preparation")

X = df.iloc[:, 1:2].values
y = df.iloc[:, 2].values



print("Step 4: Splitting the dataset: Opt")


print("Step 5: Model creation")

model = LinearRegression()






print("Step 6: Model training")

model.fit(X, y)




print("Step 7: Prediction")

print()
print(model.predict([[6.5]]))

--------------------------------

# Creating features from existing feature


Level	f1	f2	f3	Salary
1				45000
2				50000
3				60000
4				80000
5				110000
6				150000
7				200000
8				300000
9				500000
10				1000000

--------------------------------

# Steps from 1 to 7, Plotting the data

print("Polynomial Regression")
print()


print("Step 1: Importing the libraries")

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression




print("Step 2: Loading the dataset")

df = pd.read_csv("poly_dataset.csv")





print("Step 3: Data preparation")

X = df.iloc[:, 1:2].values
y = df.iloc[:, 2].values



print("Step 4: Splitting the dataset: Opt")


print("Step 5: Model creation")

model = LinearRegression()






print("Step 6: Model training")

model.fit(X, y)




print("Step 7: Prediction")

print()
# print(model.predict([[6.5]]))

print("Step Spl: Data Viz")

plt.scatter(X, y, color = "blue")

plt.plot(X, model.predict(X), color = "red")


plt.title("Linear Regression")
plt.xlabel("Position Levels")
plt.ylabel("Salary")

plt.show()

--------------------------------

Simple Linear Regression

	model.fit(feature, target)
	model.fit(X, y)

Polynomial Regression

	model.fit(polynomial features, target)
	model.fit(X_poly, y)


--------------------------------

-> We done today session
-> We will connect again tomorrow
-> Danile :)

--------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
