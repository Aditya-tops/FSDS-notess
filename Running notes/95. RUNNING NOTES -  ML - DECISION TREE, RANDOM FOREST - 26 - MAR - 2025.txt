RUNNING NOTES: 26 - MAR - 2025
--------------------------------

1. PREVIOUS TOPIC			-	ML: MULTI CLASS CLASSIFICATION
2. CURRENT TOPIC			-	ML: DECISION TREE
3. UPCOMING TOPIC			-	ML: RANDOM FOREST
									         

----------------------------------------------------------------


INDEX
---------

0. DATA SCIENCE DEMO			-	Done

1. DATA SCIENCE FUNDAMENTALS		-	Done

--------------------------------------------------

PYTHON PROGRAMMING LANG
-----------------------

0. PYTHON - INSTALLATION		-	Done

1. PYTHON - INTRODUCTION		-	Done
2. PYTHON - KEYWORDS			-	Done
3. PYTHON - HELLO WORLD PROGRAM		-	Done
4. PYTHON - NAMING CONVENTIONS		-	Done
5. PYTHON - VARIABLES			-	Done
6. PYTHON - DATA TYPES			-	Done
7. PYTHON - OPERATORS			-	Done
8. PYTHON - INPUT & OUTPUT		-	Done
9. PYTHON - FLOW CONTROL		-	Done
10. PYTHON - STRING			-	Done
11. PYTHON - FUNCTIONS - PART - 1	-	Done
12. PYTHON - FUNCTIONS - PART - 2	-	Done
13. PYTHON - MODULE			-	Done
14. PYTHON - PACKAGE			-	Done
15. PYTHON - LIST DATA STRUCUTRE	-	Done
16. PYTHON - TUPLE DATA STRUCUTRE	-	Done
17. PYTHON - SET DATA STRUCUTRE		-	Done
18. PYTHON - DICTIONARY DATA STRUCUTRE	-	Done
19. PYTHON - OBJECT ORIENTED 		-	Done
	PROGRAMMING	

--------------------------------------------------

DATA ANALYSIS				
-------------

1. PANDAS - INTRODUCTION		-	Done
2. PANDAS - SERIES - INTRODUCTION	-	Done
3. PANDAS - NAN VALUE			-	Done
4. PANDAS - SERIES - ATTRIBUTES		-	Done
5. PANDAS - SERIES - METHODS		-	Done
6. PANDAS - DATAFRAME INTRODUCTION	-	Done
7. PANDAS - DATAFRAME - LOADING 	-	Done
	DIFFERENT FILES

8. PANDAS - DATAFRAME - ATTRIBUTES	-	Done
9. PANDAS - DATAFRAME - METHODS		-	Done

10. PANDAS - DATAFRAME - RENAMING 	-	Done
	COLUMN, INDEX

11. PANDAS - DATAFRAME - INPLACE 	-	Done
	PARAMETER

12. PANDAS -DATAFRAME - HANDLING 	-	Done
	MISSING NAN VALUES

13. PANDAS - DATAFRAME - SELECTION 	- 	Done
	LOC, ILOC

14. PANDAS - DATAFRAME - FILTERING	-	Done

15. PANDAS - DATAFRAME - SORTING	-	Done

16. PANDAS - DATAFRAME - GROUPBY	-	Done

17. PANDAS - DATAFRAME - MERGING 	-	Done
	OR JOINING

18. PANDAS - DATAFRAME - CONCAT		-	Done

19. PANDAS - DATAFRAME - ADDING, 	-	Done
	DROPPING ROWS AND COLUMNS

20. PANDAS - DATAFRAME - DATE AND 	-	Done
	TIME OPERATIONS

21. PANDAS - DATAFRAME - CONCATENATING	-	Done 
	MULTIPLE CSV FILES

--------------------------------------------------

DATA ANALYSIS PROJECT
---------------------

1. EDA PROJECT				-	Done

--------------------------------------------------

DATA VISUALIZATION
------------------

1. DATA VISUALIZATION PART 1		-	Done
2. DATA VISUALIZATION PART 2		-	Done
3. DATA VISUALIZATION FUNDAMENTALS	-	Done

4. DATA VISUALIZATION POWER BI		-	Upcoming topic	
		
--------------------------------------------------

NUMPY
-----

1. NUMPY INTRODUCTION			-	Done
2. NUMPY FUNDAMENTALS			-	Done
3. NUMPY ATTRIBUTES			-	Done
4. NUMPY METHODS			-	Done

--------------------------------------------------

MATHS						STATUS
-----						------

1. MATHS - PART - 1 - POPULATION, 	-	Done
	SAMPLE, TYPES OF VARIABLES


2. MATHS - PART - 2 - MODE, MEDIAN, 	-	Done
	MEAN, RANGE, 
	STANDARD DEVIATION, VARIANCE	


3. MATHS - PART - 3 - OUTLIERS		-	Done


4. MATHS - PART - 4 - THE FIVE NUMBERS	-	Done
	SUMMARY, BOX PLOT, OUTLIER


5. MATHS - PART - 5 - SYMMETRY AND 	-	Done
	SKEWNESS


6. MATHS - PART - 6 - EXPLANATORY AND 	-	Done
	RESPONSIVE VARIABLES


7. MATHS - PART - 7 - REGRESSION 	-	Done
	AND R SQUARED


8. MATHS - PART - 8 - RESIDUALS		-	Done


9. MATHS - PART - 9 - THE NORMAL 	-	Hold
	DISTRIBUTION AND 
	68-95-99.7 RULE

10. MATHS - PART - 10 - MATRIX		-	Done

--------------------------------------------------

FEATURE ENGINEERING
-------------------

1. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 1	-	Done


2. FEATURE ENGINEERING - 
	DATA PRE PROCESSING - PART - 2	-	Done

--------------------------------------------------

MACHINE LEARNING
----------------

1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	INTRODUCTION

2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TERMINOLOGY

3. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DATA AND ML ALGORITHMS

4. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LEARNING FUNCTION

5. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TYPES OF MODELS

6. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LIFE CYCLE

7. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	TRAIN & TEST DATASETS


8. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	R VALUE


9. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION

9.1. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

9.2. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SIMPLE LINEAR REGRESSION 
	EXAMPLE

10. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	MULTIPLE LINEAR REGRESSION


12. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	PICKLING AND UNPICKLING


13. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	SAVE MODEL USING JOBLIB AND 
	PICKLING


10. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	POLYNOMIAL FEATURES

11. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	DUMMY VARIABLE, ONEHOTENCODING


12. DATA SCIENCE - MACHINE LEARNING 	-	Done
	- R VALUE


13. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	COST FUNCTION


14. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	REGRESSION COST FUNCTION


15. DATA SCIENCE - MACHINE LEARNING 	- 	Done	
	LOGISTIC REGRESSION
	BINARY CLASSIFICATION

16. DATA SCIENCE - MACHINE LEARNING 	- 	Done
	LOGISTIC REGRESSION
	MULTI CLASS CLASSIFICATION


17. DATA SCIENCE - MACHINE LEARNING 	- 	Running topic
	DECISION TREE


18. DATA SCIENCE - MACHINE LEARNING 	- 	Upcoming topic
	RANDOM FOREST ALGORITHM



--------------------------------------------------

Predefined functions
---------------------

1. print(p)		->	To display the output
2. type(p)		->	To check the data type
3. range(p)		->	To get range of values
4. input(p)		->	To take valut at runtime/dynamically
5. len(p)		->	To find number of values in sequence

6. float(p)		->	To convert to float
7. int(p)		->	To convert to int
8. list(p)		->	Convert from seq to list
9. tuple(p)		->	Convert from seq to tuple
10. set(p)		->	Convert from seq to set

11. dict(p)		->	Convert from list of tups to dict

--------------------------------

Errors
------

1. SyntaxError
2. NameError
3. KeyError
4. ValueError
5. TypeError

6. IndexError
7. IndentationError
8. AttributeError
9. ModuleNotFoundError
10. FileNotFoundError

11. InvalidParameterError

------------------------------------

17. DATA SCIENCE - MACHINE LEARNING 
	DECISION TREE

------------------------------------

Imp ponits!!!
-------------

	1. ML Flow
	2. ML Steps

------------------------------------

ML flow
-------

Data
	DataFrame
		Feature Engg
				Array
					Machine Learning Algorithm
					Cost function
					Gradient Descent Algorithm
						Increase accuracy
						Reduce Error
							Bias
							Variance


ML steps
--------

	1. Importing the libraries
	2. Loading the dataset
	3. Data preparation
	4. Splitting the dataset
	5. Model creation
	6. Model training
	7. Prediction

--------------------------------

# Steps from 1 to 3

print("Topic: Decision Tree")
print()



print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.preprocessing import LabelEncoder






print("Step 2: Loading the dataset")

df = pd.read_csv("salaries.csv")








print("Step 3: Data preparation")

inputs = df.drop(
    'salary_more_then_100k', 
    axis = 'columns'
)

target = df['salary_more_then_100k']

obj = LabelEncoder()

inputs['company_n'] = obj.fit_transform(inputs['company'])
inputs['job_n'] = obj.fit_transform(inputs['job'])
inputs['degree_n'] = obj.fit_transform(inputs['degree'])


inputs_n = inputs.drop(['company', 'job', 'degree'], axis='columns')

print()
print(inputs)
print()
print(inputs_n)

--------------------------------

	fruits
	apple
	banana
	orange

One hot encoding
-------------

		apple	banana	orange

	apple	1	0	0
	banana	0	1	0
	orange	0	0	1



	apple	=>	100
	banana	=>	010
	orange	=>	001


--------------------------------

We can compare quickly to understand: if you done 10 times practice

1 time practice:	total confusion

--------------------------------

# Steps from 1 to 7

print("Topic: Decision Tree")
print()



print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier





print("Step 2: Loading the dataset")

df = pd.read_csv("salaries.csv")








print("Step 3: Data preparation")

inputs = df.drop(
    'salary_more_then_100k', 
    axis = 'columns'
)


obj = LabelEncoder()

inputs['company_n'] = obj.fit_transform(inputs['company'])
inputs['job_n'] = obj.fit_transform(inputs['job'])
inputs['degree_n'] = obj.fit_transform(inputs['degree'])


X = inputs.drop(['company', 'job', 'degree'], axis = 'columns').values
y = df['salary_more_then_100k'].values





print("Step 4: Splitting the dataset: Optional")



print("Step 5: Model creation")

model = DecisionTreeClassifier()




print("Step 6: Model training")

model.fit(X, y)




print("Step 7: Prediction")
print()
print(model.predict([[1, 1, 1]]))

--------------------------------

# Steps from 1 to 7
# Salary prediction model

print("Topic: Decision Tree")
print()



print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier





print("Step 2: Loading the dataset")

df = pd.read_csv("salaries.csv")








print("Step 3: Data preparation")

inputs = df.drop(
    'salary_more_then_100k', 
    axis = 'columns'
)


obj = LabelEncoder()

inputs['company_n'] = obj.fit_transform(inputs['company'])
inputs['job_n'] = obj.fit_transform(inputs['job'])
inputs['degree_n'] = obj.fit_transform(inputs['degree'])


X = inputs.drop(['company', 'job', 'degree'], axis = 'columns').values
y = df['salary_more_then_100k'].values





print("Step 4: Splitting the dataset: Optional")



print("Step 5: Model creation")

model = DecisionTreeClassifier()




print("Step 6: Model training")

model.fit(X, y)




print("Step 7: Prediction")
print()
print(model.predict([[2, 2, 0]]))

--------------------------------

# Checking model score

print("Topic: Decision Tree")
print()



print("Step 1: Importing the libraries")

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier





print("Step 2: Loading the dataset")

df = pd.read_csv("salaries.csv")








print("Step 3: Data preparation")

inputs = df.drop(
    'salary_more_then_100k', 
    axis = 'columns'
)


obj = LabelEncoder()

inputs['company_n'] = obj.fit_transform(inputs['company'])
inputs['job_n'] = obj.fit_transform(inputs['job'])
inputs['degree_n'] = obj.fit_transform(inputs['degree'])


X = inputs.drop(['company', 'job', 'degree'], axis = 'columns').values
y = df['salary_more_then_100k'].values





print("Step 4: Splitting the dataset: Optional")



print("Step 5: Model creation")

model = DecisionTreeClassifier()




print("Step 6: Model training")

model.fit(X, y)




print("Step 7: Prediction")
print()
print(model.predict([[2, 2, 0]]))



print("Step Spl: Checking score")

print()
print(model.score(X, y))

--------------------------------


Rejesh	->	establish company
	->	initially computer to store the data
	->	daily is data is increasing
	->	1 TB, 2 TB, 3 Tb.
	->	cloud:	rented systems

	->	63PB

--------------------------------

Cost function
-------------

-> Optimization technique
-> Minimize the error

Supervised learning
	Regression
		Cost functions
			MSE
			RMSE
			MAE
			Lets apply on Linear Regression
			So that we can close this example

	classification
		Cost functions


--------------------------------

# Model evalution

print("Topic: Model evaluation")
print()



print("Step 1: Importing the libraries")

import numpy as np
import pandas as pd

from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split





print("Step 2: Loading the dataset")

df = pd.read_csv('student_scores.csv')




print("Step 3: Data preparation")

X = df.iloc[:, :-1].values
y = df.iloc[:, 1].values





print("Step 4: Splitting the dataset")

X_train, X_test, y_train, y_test = train_test_split(
    X, 
    y, 
    test_size = 0.2, 
    random_state = 0
)



print("Step 5: Model creation")

model = LinearRegression()




print("Step 6: Model training")

model.fit(X_train, y_train)




print("Step 7: Prediction with model")

y_pred = model.predict(X_test)


print("Step Spl: Evaluate the model")

mae = metrics.mean_absolute_error(y_test, y_pred)
mse = metrics.mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print()
print("MAE: ", mae)
print("MSE: ", mse)
print("RMSE: ", rmse)

--------------------------------

-> We done today Session
-> We will continue tomorrow
-> Daniel

--------------------------------

Daily
-----

1. Running notes				->	Sharing
2. Materials (PDF format)			->	Sharing

We are sharing by using 			->	Google classroom

--------------------------------
